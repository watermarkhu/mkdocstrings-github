{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-github <p>A GitHub Actions handler for mkdocstrings.</p> <p></p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udcdd Automatic Example Signature: Displays an example call signature alongside the description. The version shown can be the latest release, latest major, current reference, or any custom string.</li> <li>\u2728 Enhanced Markdown Descriptions: All description elements are parsed using a markdown parser, enabling comprehensive formatting and rich documentation capabilities.</li> <li>\ud83e\udde9 Individual Parameter Hyperlinks: Each action or workflow parameter\u2014including inputs, outputs, and secrets\u2014receives a unique HTML id, facilitating direct linking to specific parameter documentation.</li> <li>\ud83d\udd12 Automated Permission Aggregation: For reusable workflows, if permissions are specified at the job level rather than the workflow level, the required final permissions are automatically determined and displayed in the signature.</li> <li>\ud83d\udd17 Parameter cross-linking: Link to other parameters of the action or workflow via a simple Markdown syntax.</li> </ul> Example <p>The following <code>action.yaml</code> file</p> action.yaml <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> <p>will be shown in the documentation as:</p> <p>"},{"location":"#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> <p> Outputs: \u00a4 </p> Name Description <code>output-string</code> <p>A string output from the action</p> <code>output-number</code> <p>A numeric output from the action</p>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"contributing/","title":"Contributing to mkdocstrings-matlab","text":"<p>Thank you for considering contributing! Please follow these steps to get started:</p>"},{"location":"contributing/#1-environment-setup","title":"1. Environment Setup","text":"<p>Install all dependencies using uv:</p> <pre><code>uv sync --all-groups\n</code></pre> <p>Learn more about uv: uv documentation</p>"},{"location":"contributing/#2-pre-commit-hooks-using-prek","title":"2. Pre-commit Hooks using prek","text":"<p>Set up prek hooks to ensure code quality:</p> <pre><code>uv run prek install\n</code></pre> <p>See: prek documentation</p>"},{"location":"contributing/#3-running-tests","title":"3. Running Tests","text":"<p>Run tests with pytest:</p> <pre><code>uv run pytest\n</code></pre> <p>See: pytest documentation</p>"},{"location":"contributing/#4-pull-request-guidelines","title":"4. Pull Request Guidelines","text":"<ul> <li>Pull requests should target the <code>main</code> branch.</li> <li>Use Conventional Commits for commit messages.</li> </ul> <p>See: Conventional Commits Spec</p>"},{"location":"credits/","title":"Credits","text":"<p>This project owes its existence to the incredible <code>mkdocstrings</code> and its primary handler <code>mkdocstrings-python</code>. Special thanks to @paramoy for his efforts.</p> <p>Moreover, <code>mkdocstrings</code> itself extends <code>mkdocs</code> and <code>mkdocs-material</code>, which form the foundation of the entire mkdoc* suite of documentation tools.</p>"},{"location":"license-page/","title":"License","text":""},{"location":"license-page/#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mark Shui Hu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Example action/workflow</p> <p>Throughout the next pages, we will use a composite action <code>action.yaml</code> and a reusable workflow <code>.github/workflows/example_workflow.yml</code> as examples.</p> compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/#installation","title":"Installation","text":"<p>This package is extension package to mkdocstrings, a framework for auto-documentation for various languages. Language support is inserted into the framework by providing handlers. The mkdocstrings-github package provides a GitHub handler.</p> <p>You can install the GitHub handler by specifying it as a dependency:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-github&gt;=0.X.Y\",\n]\n</code></pre> <p>The default mkdocstrings handler is the Python handler. You can change the default hanlder and set the GitHub handler as default be defining the <code>default_handler</code> configuration option of <code>mkdocstrings</code> in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    default_handler: github\n</code></pre>"},{"location":"usage/#injecting-documentation","title":"Injecting documentation","text":"<p>With the GitHub handler installed and configured as default handler, you can inject documentation for a GitHub action or a reusable workflow in your Markdown pages:</p> <pre><code>::: &lt;path to action or workflow from the git root&gt;\n</code></pre> <p>If another handler was defined as default handler, you can explicitely ask for the GitHub handler to be used when injecting documentation with the handler option:</p> <pre><code>::: &lt;path to action or workflow from the git root&gt;\n    handler: github\n</code></pre> <p>The path to the action or workflow is consistent with how they are called in GitHub Actions. For actions, the path should the folder containing the <code>action.yml</code> or <code>action.yaml</code> file. The filename should not be included. </p> <code>action.yaml</code> or <code>action.yml</code><code>.github/actions/myaction/action.yml</code><code>action/nested/in/directory/action.yaml</code> <pre><code>::: .\n</code></pre> <pre><code>::: .github/actions/myaction\n</code></pre> <pre><code>::: action/nested/in/directory\n</code></pre> <p>For reusable workflows, which are workflows that include the <code>workflow_call</code> trigger, the full path should be included. </p> <code>.github/workflows/reusable_workflow.yaml</code><code>.github/workflows/myworkflow.yml</code> <pre><code>::: .github/workflows/reusable_workflow.yaml\n</code></pre> <pre><code>::: .github/workflows/myworkflow.yml\n</code></pre>"},{"location":"usage/#linking","title":"Linking","text":"<p>For every documented action or workflow, HTML tags are inserted on the page to allow linking with the action/workflow path as the id. Additionally, linking to action and workflow parameters, and cross-linking to other parameters, is possible with the <code>parameters_anchors</code> option.</p>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>When installed, the Github handler can be configured in <code>mkdocs.yml</code></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      github:\n        ... # The GitHub handler configuration\n</code></pre>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are **global only, and go directly under the handler's name.</p>"},{"location":"usage/#mkdocstrings_handlers.github.config.GitHubConfig.repo","title":"<code>repo</code>","text":"<p>The GitHub repository in the format owner/repo.</p> <p>By default, the repository is inferred from the current git repository using the default origin remote. If it cannot be inferred, it must be set manually.</p>"},{"location":"usage/#mkdocstrings_handlers.github.config.GitHubConfig.feather_icons_source","title":"<code>feather_icons_source</code>","text":"<p>The source URL for Feather icons.</p> <p>In certain enterprise environments, external CDN access may be restricted. In such cases, you can host the <code>feather.min.js</code> file locally and set this option to the local path or URL. See more information at https://github.com/feathericons/feather.</p>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      github:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: .github/workflows/reusable-workflow.yml\n    handler: github\n    options:\n        do_something: true\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: Generic options that does not fit in the below catagories. </li> <li>Headings options: options related to the headings and the table of contents.</li> <li>Signature options: options related to the shown call signature.</li> <li>Parameters options: options related to the input (and output) parameters of the action or workflow.</li> </ul> <p>The following are the available options for the GitHub handler. The options are loaded as a pydantic model, so they are type-checked and validated.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The following are the available options for the GitHub handler.\\nThe options are loaded as a pydantic model, so they are type-checked and validated.\",\n  \"properties\": {\n    \"show_description\": {\n      \"default\": true,\n      \"description\": \"Whether to show the description in the documentation.\",\n      \"title\": \"Show Description\",\n      \"type\": \"boolean\"\n    },\n    \"description\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated description of the object.\",\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"show_source\": {\n      \"default\": true,\n      \"description\": \"Whether to show the source link in the documentation.\",\n      \"title\": \"Show Source\",\n      \"type\": \"boolean\"\n    },\n    \"show_heading\": {\n      \"default\": true,\n      \"description\": \"Whether to show the heading in the documentation.\",\n      \"title\": \"Show Heading\",\n      \"type\": \"boolean\"\n    },\n    \"heading\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated heading of the object.\",\n      \"title\": \"Heading\",\n      \"type\": \"string\"\n    },\n    \"heading_level\": {\n      \"default\": 2,\n      \"description\": \"The initial heading level to use.\",\n      \"title\": \"Heading Level\",\n      \"type\": \"integer\"\n    },\n    \"show_branding\": {\n      \"default\": true,\n      \"description\": \"Whether to show the action branding (logo and color) in the documentation.\",\n      \"title\": \"Show Branding\",\n      \"type\": \"boolean\"\n    },\n    \"branding_icon\": {\n      \"default\": \"\",\n      \"description\": \"Custom icon from https://feathericons.com/ to use for the branding.\",\n      \"title\": \"Branding Icon\",\n      \"type\": \"string\"\n    },\n    \"branding_icon_color\": {\n      \"default\": \"\",\n      \"description\": \"Custom icon color for the feather icon.\",\n      \"title\": \"Branding Icon Color\",\n      \"type\": \"string\"\n    },\n    \"show_toc_entry\": {\n      \"default\": true,\n      \"description\": \"If the heading is not shown, at least add a ToC entry for it.\",\n      \"title\": \"Show Toc Entry\",\n      \"type\": \"boolean\"\n    },\n    \"toc_label\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated toc label of the root object.\",\n      \"title\": \"Toc Label\",\n      \"type\": \"string\"\n    },\n    \"show_signature\": {\n      \"default\": true,\n      \"description\": \"Whether to show the signature in the documentation.\",\n      \"title\": \"Show Signature\",\n      \"type\": \"boolean\"\n    },\n    \"signature_show_secrets\": {\n      \"default\": false,\n      \"description\": \"Whether to show secrets in the signature.\",\n      \"title\": \"Signature Show Secrets\",\n      \"type\": \"boolean\"\n    },\n    \"signature_show_permissions\": {\n      \"default\": true,\n      \"description\": \"Whether to show permissions in the workflow signature.\",\n      \"title\": \"Signature Show Permissions\",\n      \"type\": \"boolean\"\n    },\n    \"signature_version\": {\n      \"default\": \"ref\",\n      \"description\": \"The versioning scheme to use for the signature.\\n\\n        - `ref`: use the git ref (branch or tag) from which the workflow or action is run,\\n        - `major`: use the latest release tag matching `vX` (e.g. `v1`, `v2`),\\n        - `semver`: use the latest release tag matching `vX.X.X` (e.g. `v1.0.0`, `v2.1.3`),\\n        - `string`: use the string provided in the [`signature_version_string`][mkdocstrings_handlers.github.config.GitHubOptions.signature_version_string] option.\\n        \",\n      \"enum\": [\n        \"ref\",\n        \"major\",\n        \"semver\",\n        \"string\"\n      ],\n      \"title\": \"Signature Version\",\n      \"type\": \"string\"\n    },\n    \"signature_version_string\": {\n      \"default\": \"latest\",\n      \"description\": \"The version string to use if [`signature_version`][mkdocstrings_handlers.github.config.GitHubOptions.signature_version] is set to `string`.\",\n      \"title\": \"Signature Version String\",\n      \"type\": \"string\"\n    },\n    \"show_inputs\": {\n      \"default\": true,\n      \"description\": \"Whether to show inputs in the documentation.\",\n      \"title\": \"Show Inputs\",\n      \"type\": \"boolean\"\n    },\n    \"show_inputs_only_required\": {\n      \"default\": false,\n      \"description\": \"Whether to show only required inputs in the documentation.\",\n      \"title\": \"Show Inputs Only Required\",\n      \"type\": \"boolean\"\n    },\n    \"show_outputs\": {\n      \"default\": false,\n      \"description\": \"Whether to show outputs in the documentation.\",\n      \"title\": \"Show Outputs\",\n      \"type\": \"boolean\"\n    },\n    \"show_secrets\": {\n      \"default\": true,\n      \"description\": \"Whether to show secrets in the documentation.\",\n      \"title\": \"Show Secrets\",\n      \"type\": \"boolean\"\n    },\n    \"show_secrets_only_required\": {\n      \"default\": false,\n      \"description\": \"Whether to show only required secrets in the documentation.\",\n      \"title\": \"Show Secrets Only Required\",\n      \"type\": \"boolean\"\n    },\n    \"parameters_order\": {\n      \"default\": \"source\",\n      \"description\": \"The parameters ordering to use.\\n\\n        - `alphabetical`: order by the parameters names,\\n        - `source`: order parameters as they appear in the source file.\\n        \",\n      \"enum\": [\n        \"alphabetical\",\n        \"source\"\n      ],\n      \"title\": \"Parameters Order\",\n      \"type\": \"string\"\n    },\n    \"parameters_section_style\": {\n      \"default\": \"table\",\n      \"description\": \"The style used to render docstring sections.\\n\\n        - `table`: render parameters in a table,\\n        - `list`: render parameters in a list.\\n        \",\n      \"enum\": [\n        \"table\",\n        \"list\"\n      ],\n      \"title\": \"Parameters Section Style\",\n      \"type\": \"string\"\n    },\n    \"parameters_anchors\": {\n      \"default\": true,\n      \"description\": \"Whether to add anchors to parameters in the documentation.\",\n      \"title\": \"Parameters Anchors\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"GitHubOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>show_description</code>                 (<code>bool</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>show_source</code>                 (<code>bool</code>)             </li> <li> <code>show_heading</code>                 (<code>bool</code>)             </li> <li> <code>heading</code>                 (<code>str</code>)             </li> <li> <code>heading_level</code>                 (<code>int</code>)             </li> <li> <code>show_branding</code>                 (<code>bool</code>)             </li> <li> <code>branding_icon</code>                 (<code>str</code>)             </li> <li> <code>branding_icon_color</code>                 (<code>str</code>)             </li> <li> <code>show_toc_entry</code>                 (<code>bool</code>)             </li> <li> <code>toc_label</code>                 (<code>str</code>)             </li> <li> <code>show_signature</code>                 (<code>bool</code>)             </li> <li> <code>signature_show_secrets</code>                 (<code>bool</code>)             </li> <li> <code>signature_show_permissions</code>                 (<code>bool</code>)             </li> <li> <code>signature_version</code>                 (<code>SIGNATURE_VERSION</code>)             </li> <li> <code>signature_version_string</code>                 (<code>str</code>)             </li> <li> <code>show_inputs</code>                 (<code>bool</code>)             </li> <li> <code>show_inputs_only_required</code>                 (<code>bool</code>)             </li> <li> <code>show_outputs</code>                 (<code>bool</code>)             </li> <li> <code>show_secrets</code>                 (<code>bool</code>)             </li> <li> <code>show_secrets_only_required</code>                 (<code>bool</code>)             </li> <li> <code>parameters_order</code>                 (<code>PARAMETERS_ORDER</code>)             </li> <li> <code>parameters_section_style</code>                 (<code>PARAMETERS_SECTION_STYLE</code>)             </li> <li> <code>parameters_anchors</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"usage/general/","title":"General options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_description: true</code><code>show_description: false</code> Preview <code>description: ''</code><code>description: 'A custom description'</code> Preview <code>show_source: true</code><code>show_source: false</code>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.show_description","title":"<code>show_description</code>","text":"<p>Whether to show the description in the documentation.</p>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.description","title":"<code>description</code>","text":"<p>A custom string to override the autogenerated description of the object.</p>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre>       A custom description           <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.show_source","title":"<code>show_source</code>","text":"<p>Whether to show the source link in the documentation.</p>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/general/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code>"},{"location":"usage/headings/","title":"Headings options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_heading: true</code><code>show_heading: false</code> <pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> Preview <code>heading: ''</code><code>heading: 'A custom heading'</code> Preview <code>heading_level: 3</code><code>heading_level: 5</code> Preview <code>show_branding: true</code><code>show_branding: false</code> Preview <code>branding_icon: ''</code><code>branding_icon: 'briefcase'</code> Preview <code>branding_icon_color: ''</code><code>branding_icon_color: 'green'</code> Preview <code>show_toc_entry: true</code><code>show_toc_entry: false</code> <p>Table of contents Some heading <code>Example object</code> Other heading </p> <p>Table of contents Some heading Other heading</p> Preview <code>toc_label: ''</code><code>toc_label: 'Custom label'</code> <p>Table of contents Some heading <code>Example object</code> Other heading </p> <p>Table of contents Some heading <code>Custom label</code> Other heading</p>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_heading","title":"<code>show_heading</code>","text":"<p>Whether to show the heading in the documentation.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.heading","title":"<code>heading</code>","text":"<p>A custom string to override the autogenerated heading of the object.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#.","title":"A custom heading","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.heading_level","title":"<code>heading_level</code>","text":"<p>The initial heading level to use.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_branding","title":"<code>show_branding</code>","text":"<p>Whether to show the action branding (logo and color) in the documentation.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.branding_icon","title":"<code>branding_icon</code>","text":"<p>Custom icon from https://feathericons.com/ to use for the branding.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.branding_icon_color","title":"<code>branding_icon_color</code>","text":"<p>Custom icon color for the feather icon.</p>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#.","title":"Example action","text":"<pre><code>- uses: watermarkhu/mkdocstrings-github@v1\n  with:\n    input-string: ''\n</code></pre> <p>An example <code>action.yaml</code> file for the purpose of documentation</p> <p> Inputs: \u00a4 </p> Name Description Default <code>input-string</code> <p>A string input parameter</p> <code>input-number</code> <p>A numeric input parameter</p> <code>42</code> <code>input-boolean</code> <p>A boolean input parameter</p> <code>false</code> Source of <code>watermarkhu/mkdocstrings-github@v1</code> <pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_toc_entry","title":"<code>show_toc_entry</code>","text":"<p>If the heading is not shown, at least add a ToC entry for it.</p>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.toc_label","title":"<code>toc_label</code>","text":"<p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"usage/parameters/","title":"Parameters options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_inputs: true</code><code>show_inputs: false</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_inputs","title":"<code>show_inputs</code>","text":"<p>Whether to show inputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_inputs_only_required: false</code><code>show_inputs_only_required: true</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_inputs_only_required","title":"<code>show_inputs_only_required</code>","text":"<p>Whether to show only required inputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_outputs: false</code><code>show_outputs: true</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_outputs","title":"<code>show_outputs</code>","text":"<p>Whether to show outputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> <p> Outputs: \u00a4 </p> Name Description <code>deployment-id</code> <p>ID of the created deployment</p> <code>deployment-url</code> <p>URL of the deployment</p> <code>success</code> <p>Whether the deployment was successful</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_secrets: true</code><code>show_secrets: false</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_secrets","title":"<code>show_secrets</code>","text":"<p>Whether to show secrets in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_secrets_only_required: false</code><code>show_secrets_only_required: true</code>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_secrets_only_required","title":"<code>show_secrets_only_required</code>","text":"<p>Whether to show only required secrets in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>parameters_order: 'source'</code><code>parameters_order: 'alphabetical'</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_order","title":"<code>parameters_order</code>","text":"<p>The parameters ordering to use.</p> <ul> <li><code>alphabetical</code>: order by the parameters names,</li> <li><code>source</code>: order parameters as they appear in the source file.</li> </ul>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>environment</code> <p>Environment to deploy to</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>version</code> <p>Version to deploy</p> <code>latest</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>parameters_section_style: 'table'</code><code>parameters_section_style: 'list'</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_section_style","title":"<code>parameters_section_style</code>","text":"<p>The style used to render docstring sections.</p> <ul> <li><code>table</code>: render parameters in a table,</li> <li><code>list</code>: render parameters in a list.</li> </ul>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> <p>Cross linking parameters</p> <p>It is possible to cross-link parameters within the yaml descriptions by a markdown link in the format <code>[text](#&lt;domain&gt;.&lt;name&gt;)</code>. </p> <p>E.g. the input <code>my_input</code> can be linked with <code>[text](#inputs.my_input)</code> the secret <code>MY_SECRET</code> is linked with <code>[text](#secrets.MY_SECRET)</code>.</p> Preview <code>parameters_anchors: true</code><code>parameters_anchors: false</code>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> <ul> <li> <code>environment</code> - required <p>Environment to deploy to</p> </li> <li> <code>version</code> <p>Version to deploy</p>                Default: <code>latest</code> </li> <li> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p>                Default: <code>False</code> </li> <li> <code>parallel-jobs</code> <p>Number of parallel jobs</p>                Default: <code>1</code> </li> <li> <code>configuration</code> <p>JSON configuration object</p>                Default: <code>{}</code> </li> </ul> <p> Secrets: \u00a4 </p> <ul> <li> <code>API_KEY</code> - required <p>API key for external service</p> </li> <li> <code>DATABASE_URL</code> <p>Database connection string</p> </li> <li> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> </li> </ul> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_anchors","title":"<code>parameters_anchors</code>","text":"<p>Whether to add anchors to parameters in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> \u00a4 <p>Environment to deploy to</p> <code>version</code> \u00a4 <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> \u00a4 <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> \u00a4 <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> \u00a4 <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> \u00a4 <p>API key for external service</p> <code>DATABASE_URL</code> \u00a4 <p>Database connection string</p> <code>SLACK_WEBHOOK</code> \u00a4 <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/","title":"Signatures options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Example action'\ndescription: 'An example `action.yaml` file for the purpose of documentation'\nauthor: 'watermarkhu'\n\nbranding:\n  icon: 'package'\n  color: 'blue'\n\ninputs:\n  input-string:\n    description: 'A string input parameter'\n    required: true\n  input-number:\n    description: 'A numeric input parameter'\n    required: false\n    default: '42'\n  input-boolean:\n    description: 'A boolean input parameter'\n    required: false\n    default: 'false'\n\noutputs:\n  output-string:\n    description: 'A string output from the action'\n    value: 'result-value'\n  output-number:\n    description: 'A numeric output from the action'\n    value: '123'\n\nruns:\n  using: 'composite'\n  steps:\n    - name: Execute action logic\n      run: |\n        echo \"input-string=${{ inputs.input-string }}\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-number=123\" &gt;&gt; $GITHUB_OUTPUT\n        echo \"output-json={\\\"key\\\": \\\"value\\\", \\\"number\\\": 456}\" &gt;&gt; $GITHUB_OUTPUT\n      shell: bash\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_signature: true</code><code>show_signature: false</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.show_signature","title":"<code>show_signature</code>","text":"<p>Whether to show the signature in the documentation.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_show_secrets: false</code><code>signature_show_secrets: true</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_show_secrets","title":"<code>signature_show_secrets</code>","text":"<p>Whether to show secrets in the signature.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\nsecrets:\n  API_KEY: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_show_permissions: true</code><code>signature_show_permissions: false</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_show_permissions","title":"<code>signature_show_permissions</code>","text":"<p>Whether to show permissions in the workflow signature.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> <p>Info</p> <p>To automatically grab the latest <code>major</code> or <code>semver</code> release, mkdocstrings-github needs to access GitHub to get the releases. Authentication is set by either the environment variable <code>GH_TOKEN</code>, or via <code>.netrc</code>. If both aren't available, a final attempt is made via the GitHub CLI with <code>gh auth token</code>. </p> <p>When building your documentation in GitHub Actions, make sure that the build step has the environment variable <code>GH_TOKEN</code> set.</p> Example build step<pre><code>...\n- name: build step\n  env:\n    GH_TOKEN: ${{ github.token }}\n  run: | \n    mkdocs build \n</code></pre> <p>Info</p> <p>For GitHub Enterprise instances, you need to additionally set the <code>GH_HOST</code> environment variable to your GitHub hostname. </p> Preview <code>signature_version: ref</code><code>signature_version: major</code><code>signature_version: semver</code><code>signature_version: string</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_version","title":"<code>signature_version</code>","text":"<p>The versioning scheme to use for the signature.</p> <ul> <li><code>ref</code>: use the git ref (branch or tag) from which the workflow or action is run,</li> <li><code>major</code>: use the latest release tag matching <code>vX</code> (e.g. <code>v1</code>, <code>v2</code>),</li> <li><code>semver</code>: use the latest release tag matching <code>vX.X.X</code> (e.g. <code>v1.0.0</code>, <code>v2.1.3</code>),</li> <li><code>string</code>: use the string provided in the <code>signature_version_string</code> option.</li> </ul>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@my_current_branch\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@my_current_branch</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1.2.3\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@v1.2.3</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@a_custom_version\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@a_custom_version</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_version_string: latest</code><code>signature_version_string: foobar</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_version_string","title":"<code>signature_version_string</code>","text":"<p>The version string to use if <code>signature_version</code> is set to <code>string</code>.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@latest\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@latest</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@foobar\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: ''\n</code></pre> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to</p> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>watermarkhu/mkdocstrings-github/.github/workflows/example_workflow.yml@foobar</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: 'Environment to deploy to'\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"}]}