{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"mkdocstrings-github <p>A GitHub Actions handler for mkdocstrings.</p> <p></p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udcdd Automatic Example Signature: Displays an example call signature alongside the description. The version shown can be the latest release, latest major, current reference, or any custom string.</li> <li>\u2728 Enhanced Markdown Descriptions: All description elements are parsed using a markdown parser, enabling comprehensive formatting and rich documentation capabilities.</li> <li>\ud83e\udde9 Individual Parameter Hyperlinks: Each action or workflow parameter\u2014including inputs, outputs, and secrets\u2014receives a unique HTML id, facilitating direct linking to specific parameter documentation.</li> <li>\ud83d\udd12 Automated Permission Aggregation: For reusable workflows, if permissions are specified at the job level rather than the workflow level, the required final permissions are automatically determined and displayed in the signature.</li> <li>\ud83d\udd17 Parameter cross-linking: Link to other parameters of the action or workflow via a simple Markdown syntax.</li> </ul> <p>Note</p> <p>Currently, only the Material for MkDocs theme is supported.</p> Example <p>The following <code>action.yaml</code> file</p> action.yaml <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> <p>will be shown in the documentation as:</p> <p>"},{"location":"#.","title":"Checkout","text":"<pre><code>- uses: actions/checkout@v5\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> <p> Outputs: \u00a4 </p> Name Description <code>ref</code> <p>The branch, tag or SHA that was checked out</p> <code>commit</code> <p>The commit SHA that was checked out</p>"},{"location":"changelog/","title":"CHANGELOG","text":""},{"location":"changelog/#v050-2025-10-13","title":"v0.5.0 (2025-10-13)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Properly show read-all/write-all permissions   (#33,   <code>5f5e792</code>)</li> </ul>"},{"location":"changelog/#documentation","title":"Documentation","text":"<ul> <li>Better docs with actions/checkout example   (#33,   <code>5f5e792</code>)</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Move signature repository name to local options   (#33,   <code>5f5e792</code>)</li> </ul>"},{"location":"changelog/#v045-2025-10-13","title":"v0.4.5 (2025-10-13)","text":""},{"location":"changelog/#refactoring","title":"Refactoring","text":"<ul> <li> <p>Show annotation in stead of empty   (#32,   <code>46942af</code>)</p> </li> <li> <p>Show annotation instead of empty   (#32,   <code>46942af</code>)</p> </li> </ul>"},{"location":"changelog/#v044-2025-10-13","title":"v0.4.4 (2025-10-13)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>templates: Hide signature sections properly   (#31,   <code>86d9628</code>)</li> </ul>"},{"location":"changelog/#v043-2025-10-12","title":"v0.4.3 (2025-10-12)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Hide secrets and inputs from signature if there are none   (#30,   <code>f9831f6</code>)</li> </ul>"},{"location":"changelog/#continuous-integration","title":"Continuous Integration","text":"<ul> <li>More tests (#30,   <code>f9831f6</code>)</li> </ul>"},{"location":"changelog/#performance-improvements","title":"Performance Improvements","text":"<ul> <li>Use GITHUB_REPOSITORY env var in GitHub Actions   (#30,   <code>f9831f6</code>)</li> </ul>"},{"location":"changelog/#v042-2025-10-08","title":"v0.4.2 (2025-10-08)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Better package tag ordering (#28,   <code>10dc87a</code>)</li> </ul>"},{"location":"changelog/#v041-2025-10-08","title":"v0.4.1 (2025-10-08)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Tag ordering (#27,   <code>76256f5</code>)</li> </ul>"},{"location":"changelog/#documentation_1","title":"Documentation","text":"<ul> <li>Update docs (#26,   <code>96f650f</code>)</li> </ul>"},{"location":"changelog/#v040-2025-10-08","title":"v0.4.0 (2025-10-08)","text":""},{"location":"changelog/#continuous-integration_1","title":"Continuous Integration","text":"<ul> <li> <p>deps: Update actions/checkout action to v5   (#22,   <code>fc56971</code>)</p> </li> <li> <p>deps: Update astral-sh/setup-uv action to v7   (#24,   <code>a07de53</code>)</p> </li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Get releases using tags (#25,   <code>25ea11d</code>)</li> </ul>"},{"location":"changelog/#v030-2025-10-07","title":"v0.3.0 (2025-10-07)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Prek configuration with local uv   (#20,   <code>0d53c40</code>)</li> </ul>"},{"location":"changelog/#build-system","title":"Build System","text":"<ul> <li>deps: Update dependency ruff to ~=0.14.0   (#21,   <code>f87cf24</code>)</li> </ul>"},{"location":"changelog/#continuous-integration_2","title":"Continuous Integration","text":"<ul> <li> <p>Add codecov (#20,   <code>0d53c40</code>)</p> </li> <li> <p>deps: Update peter-evans/create-or-update-comment action to v5   (#19,   <code>8135a2b</code>)</p> </li> </ul>"},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li> <p>Hide default and section if non are available   (#20,   <code>0d53c40</code>)</p> </li> <li> <p>Hide default and section if non are available.   (#20,   <code>0d53c40</code>)</p> </li> </ul>"},{"location":"changelog/#v026-2025-10-02","title":"v0.2.6 (2025-10-02)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Empty workflow_call (#18,   <code>368b9b5</code>)</li> </ul>"},{"location":"changelog/#continuous-integration_3","title":"Continuous Integration","text":"<ul> <li>deps: Update peter-evans/find-comment action to v4   (#17,   <code>8e2375d</code>)</li> </ul>"},{"location":"changelog/#v025-2025-09-29","title":"v0.2.5 (2025-09-29)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>No repo set (#16,   <code>554d230</code>)</li> </ul>"},{"location":"changelog/#documentation_2","title":"Documentation","text":"<ul> <li>Small fix (#15,   <code>22c6693</code>)</li> </ul>"},{"location":"changelog/#v024-2025-09-29","title":"v0.2.4 (2025-09-29)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li> <p>Allow setting hostname (#14,   <code>4676e57</code>)</p> </li> <li> <p>Set hostname (#14,   <code>4676e57</code>)</p> </li> </ul>"},{"location":"changelog/#v023-2025-09-29","title":"v0.2.3 (2025-09-29)","text":""},{"location":"changelog/#bug-fixes_9","title":"Bug Fixes","text":"<ul> <li>Default host (#13,   <code>8ac9b06</code>)</li> </ul>"},{"location":"changelog/#v022-2025-09-29","title":"v0.2.2 (2025-09-29)","text":""},{"location":"changelog/#bug-fixes_10","title":"Bug Fixes","text":"<ul> <li>Get GH_TOKEN (#12,   <code>3c449ea</code>)</li> </ul>"},{"location":"changelog/#v021-2025-09-29","title":"v0.2.1 (2025-09-29)","text":""},{"location":"changelog/#bug-fixes_11","title":"Bug Fixes","text":"<ul> <li>GitHub Enterprise with GH_HOST (#11,   <code>4f59dc0</code>)</li> </ul>"},{"location":"changelog/#documentation_3","title":"Documentation","text":"<ul> <li>Update docs (#10,   <code>3be05f5</code>)</li> </ul>"},{"location":"changelog/#v020-2025-09-28","title":"v0.2.0 (2025-09-28)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Cross-linking (#9,   <code>6bcf229</code>)</li> </ul>"},{"location":"changelog/#v010-2025-09-28","title":"v0.1.0 (2025-09-28)","text":"<ul> <li>Initial Release</li> </ul>"},{"location":"contributing/","title":"Contributing to mkdocstrings-matlab","text":"<p>Thank you for considering contributing! Please follow these steps to get started:</p>"},{"location":"contributing/#1-environment-setup","title":"1. Environment Setup","text":"<p>Install all dependencies using uv:</p> <pre><code>uv sync --all-groups\n</code></pre> <p>Learn more about uv: uv documentation</p>"},{"location":"contributing/#2-pre-commit-hooks-using-prek","title":"2. Pre-commit Hooks using prek","text":"<p>Set up prek hooks to ensure code quality:</p> <pre><code>uv run prek install\n</code></pre> <p>See: prek documentation</p>"},{"location":"contributing/#3-running-tests","title":"3. Running Tests","text":"<p>Run tests with pytest:</p> <pre><code>uv run pytest\n</code></pre> <p>See: pytest documentation</p>"},{"location":"contributing/#4-pull-request-guidelines","title":"4. Pull Request Guidelines","text":"<ul> <li>Pull requests should target the <code>main</code> branch.</li> <li>Use Conventional Commits for commit messages.</li> </ul> <p>See: Conventional Commits Spec</p>"},{"location":"credits/","title":"Credits","text":"<p>This project owes its existence to the incredible <code>mkdocstrings</code> and its primary handler <code>mkdocstrings-python</code>. Special thanks to @paramoy for his efforts.</p> <p>Moreover, <code>mkdocstrings</code> itself extends <code>mkdocs</code> and <code>mkdocs-material</code>, which form the foundation of the entire mkdoc* suite of documentation tools.</p>"},{"location":"license-page/","title":"License","text":""},{"location":"license-page/#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mark Shui Hu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Example action/workflow</p> <p>Throughout the next pages, we will use a composite action <code>action.yaml</code> and a reusable workflow <code>.github/workflows/example_workflow.yml</code> as examples.</p> compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/#installation","title":"Installation","text":"<p>This package is extension package to mkdocstrings, a framework for auto-documentation for various languages. Language support is inserted into the framework by providing handlers. The mkdocstrings-github package provides a GitHub handler.</p> <p>You can install the GitHub handler by specifying it as a dependency:</p> pyproject.toml<pre><code># PEP 621 dependencies declaration\n# adapt to your dependencies manager\n[project]\ndependencies = [\n    \"mkdocstrings-github\",\n]\n</code></pre> <p>after which the generated documentation can be inserted in the markdown page with:</p> <pre><code>::: &lt;path-to-action-or-workflow&gt;\n    handler: github\n</code></pre> <p>The default mkdocstrings handler is the Python handler. You can change the default hanlder and set the GitHub handler as default be defining the <code>default_handler</code> configuration option of <code>mkdocstrings</code> in <code>mkdocs.yml</code>:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    default_handler: github\n</code></pre>"},{"location":"usage/#injecting-documentation","title":"Injecting documentation","text":"<p>With the GitHub handler installed and configured as default handler, you can inject documentation for a GitHub action or a reusable workflow in your Markdown pages:</p> <pre><code>::: &lt;path to action or workflow from the git root&gt;\n</code></pre> <p>If another handler was defined as default handler, you can explicitely ask for the GitHub handler to be used when injecting documentation with the handler option:</p> <pre><code>::: &lt;path to action or workflow from the git root&gt;\n    handler: github\n</code></pre> <p>The path to the action or workflow is consistent with how they are called in GitHub Actions. For actions, the path should the folder containing the <code>action.yml</code> or <code>action.yaml</code> file. The filename should not be included. </p> <code>action.yaml</code> or <code>action.yml</code><code>.github/actions/myaction/action.yml</code><code>action/nested/in/directory/action.yaml</code> <pre><code>::: .\n</code></pre> <pre><code>::: .github/actions/myaction\n</code></pre> <pre><code>::: action/nested/in/directory\n</code></pre> <p>For reusable workflows, which are workflows that include the <code>workflow_call</code> trigger, the full path should be included. </p> <code>.github/workflows/reusable_workflow.yaml</code><code>.github/workflows/myworkflow.yml</code> <pre><code>::: .github/workflows/reusable_workflow.yaml\n</code></pre> <pre><code>::: .github/workflows/myworkflow.yml\n</code></pre>"},{"location":"usage/#linking","title":"Linking","text":"<p>For every documented action or workflow, HTML tags are inserted on the page to allow linking with the action/workflow path as the id. Additionally, linking to action and workflow parameters, and cross-linking to other parameters, is possible with the <code>parameters_anchors</code> option.</p>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>When installed, the Github handler can be configured in <code>mkdocs.yml</code></p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      github:\n        ... # The GitHub handler configuration\n</code></pre>"},{"location":"usage/#global-only-options","title":"Global-only options","text":"<p>Some options are global only, and go directly under the handler's name.</p>"},{"location":"usage/#mkdocstrings_handlers.github.config.GitHubConfig.feather_icons_source","title":"<code>feather_icons_source</code>","text":"<p>The source URL for Feather icons.</p> <p>In certain enterprise environments, external CDN access may be restricted. In such cases, you can host the <code>feather.min.js</code> file locally and set this option to the local path or URL. See more information at https://github.com/feathericons/feather.</p>"},{"location":"usage/#globallocal-options","title":"Global/local options","text":"<p>The other options can be used both globally and locally, under the <code>options</code> key. For example, globally:</p> mkdocs.yml<pre><code>plugins:\n- mkdocstrings:\n    handlers:\n      github:\n        options:\n          do_something: true\n</code></pre> <p>...and locally, overriding the global configuration:</p> docs/some_page.md<pre><code>::: .github/workflows/reusable-workflow.yml\n    handler: github\n    options:\n        do_something: true\n</code></pre> <p>These options affect how the documentation is collected from sources and rendered. See the following tables summarizing the options, and get more details for each option in the following pages:</p> <ul> <li>General options: Generic options that does not fit in the below catagories. </li> <li>Headings options: options related to the headings and the table of contents.</li> <li>Signature options: options related to the shown call signature.</li> <li>Parameters options: options related to the input (and output) parameters of the action or workflow.</li> </ul> <p>The following are the available options for the GitHub handler. The options are loaded as a pydantic model, so they are type-checked and validated.</p> Show JSON schema: <pre><code>{\n  \"description\": \"The following are the available options for the GitHub handler.\\nThe options are loaded as a pydantic model, so they are type-checked and validated.\",\n  \"properties\": {\n    \"show_description\": {\n      \"default\": true,\n      \"description\": \"Whether to show the description in the documentation.\",\n      \"title\": \"Show Description\",\n      \"type\": \"boolean\"\n    },\n    \"description\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated description of the object.\",\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"show_source\": {\n      \"default\": true,\n      \"description\": \"Whether to show the source link in the documentation.\",\n      \"title\": \"Show Source\",\n      \"type\": \"boolean\"\n    },\n    \"show_heading\": {\n      \"default\": true,\n      \"description\": \"Whether to show the heading in the documentation.\",\n      \"title\": \"Show Heading\",\n      \"type\": \"boolean\"\n    },\n    \"heading\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated heading of the object.\",\n      \"title\": \"Heading\",\n      \"type\": \"string\"\n    },\n    \"heading_level\": {\n      \"default\": 2,\n      \"description\": \"The initial heading level to use.\",\n      \"title\": \"Heading Level\",\n      \"type\": \"integer\"\n    },\n    \"show_branding\": {\n      \"default\": true,\n      \"description\": \"Whether to show the action branding (logo and color) in the documentation.\",\n      \"title\": \"Show Branding\",\n      \"type\": \"boolean\"\n    },\n    \"branding_icon\": {\n      \"default\": \"\",\n      \"description\": \"Custom icon from https://feathericons.com/ to use for the branding.\",\n      \"title\": \"Branding Icon\",\n      \"type\": \"string\"\n    },\n    \"branding_icon_color\": {\n      \"default\": \"\",\n      \"description\": \"Custom icon color for the feather icon.\",\n      \"title\": \"Branding Icon Color\",\n      \"type\": \"string\"\n    },\n    \"show_toc_entry\": {\n      \"default\": true,\n      \"description\": \"If the heading is not shown, at least add a ToC entry for it.\",\n      \"title\": \"Show Toc Entry\",\n      \"type\": \"boolean\"\n    },\n    \"toc_label\": {\n      \"default\": \"\",\n      \"description\": \"A custom string to override the autogenerated toc label of the root object.\",\n      \"title\": \"Toc Label\",\n      \"type\": \"string\"\n    },\n    \"show_signature\": {\n      \"default\": true,\n      \"description\": \"Whether to show the signature in the documentation.\",\n      \"title\": \"Show Signature\",\n      \"type\": \"boolean\"\n    },\n    \"signature_repository\": {\n      \"default\": \"\",\n      \"description\": \"The GitHub repository in the format *owner/repo*.\\n\\n        By default, the repository is inferred from the current git repository using the default origin remote.\\n        If it cannot be inferred, it must be set manually.\\n        \",\n      \"pattern\": \"^[\\\\w.-]+/[\\\\w.-]+$\",\n      \"title\": \"Signature Repository\",\n      \"type\": \"string\"\n    },\n    \"signature_show_secrets\": {\n      \"default\": false,\n      \"description\": \"Whether to show secrets in the signature.\",\n      \"title\": \"Signature Show Secrets\",\n      \"type\": \"boolean\"\n    },\n    \"signature_show_permissions\": {\n      \"default\": true,\n      \"description\": \"Whether to show permissions in the workflow signature.\",\n      \"title\": \"Signature Show Permissions\",\n      \"type\": \"boolean\"\n    },\n    \"signature_version\": {\n      \"default\": \"ref\",\n      \"description\": \"The versioning scheme to use for the signature.\\n\\n        - `ref`: use the git ref (branch or tag) from which the workflow or action is run,\\n        - `major`: use the latest release tag matching `vX` (e.g. `v1`, `v2`),\\n        - `semver`: use the latest release tag matching `vX.X.X` (e.g. `v1.0.0`, `v2.1.3`),\\n        - `string`: use the string provided in the [`signature_version_string`][mkdocstrings_handlers.github.config.GitHubOptions.signature_version_string] option.\\n        \",\n      \"enum\": [\n        \"ref\",\n        \"major\",\n        \"semver\",\n        \"string\"\n      ],\n      \"title\": \"Signature Version\",\n      \"type\": \"string\"\n    },\n    \"signature_version_string\": {\n      \"default\": \"latest\",\n      \"description\": \"The version string to use if [`signature_version`][mkdocstrings_handlers.github.config.GitHubOptions.signature_version] is set to `string`.\",\n      \"title\": \"Signature Version String\",\n      \"type\": \"string\"\n    },\n    \"show_inputs\": {\n      \"default\": true,\n      \"description\": \"Whether to show inputs in the documentation.\",\n      \"title\": \"Show Inputs\",\n      \"type\": \"boolean\"\n    },\n    \"show_inputs_only_required\": {\n      \"default\": false,\n      \"description\": \"Whether to show only required inputs in the documentation.\",\n      \"title\": \"Show Inputs Only Required\",\n      \"type\": \"boolean\"\n    },\n    \"show_outputs\": {\n      \"default\": false,\n      \"description\": \"Whether to show outputs in the documentation.\",\n      \"title\": \"Show Outputs\",\n      \"type\": \"boolean\"\n    },\n    \"show_secrets\": {\n      \"default\": true,\n      \"description\": \"Whether to show secrets in the documentation.\",\n      \"title\": \"Show Secrets\",\n      \"type\": \"boolean\"\n    },\n    \"show_secrets_only_required\": {\n      \"default\": false,\n      \"description\": \"Whether to show only required secrets in the documentation.\",\n      \"title\": \"Show Secrets Only Required\",\n      \"type\": \"boolean\"\n    },\n    \"parameters_order\": {\n      \"default\": \"source\",\n      \"description\": \"The parameters ordering to use.\\n\\n        - `alphabetical`: order by the parameters names,\\n        - `source`: order parameters as they appear in the source file.\\n        \",\n      \"enum\": [\n        \"alphabetical\",\n        \"source\"\n      ],\n      \"title\": \"Parameters Order\",\n      \"type\": \"string\"\n    },\n    \"parameters_section_style\": {\n      \"default\": \"table\",\n      \"description\": \"The style used to render docstring sections.\\n\\n        - `table`: render parameters in a table,\\n        - `list`: render parameters in a list.\\n        \",\n      \"enum\": [\n        \"table\",\n        \"list\"\n      ],\n      \"title\": \"Parameters Section Style\",\n      \"type\": \"string\"\n    },\n    \"parameters_anchors\": {\n      \"default\": true,\n      \"description\": \"Whether to add anchors to parameters in the documentation.\",\n      \"title\": \"Parameters Anchors\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"title\": \"GitHubOptions\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>show_description</code>                 (<code>bool</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>show_source</code>                 (<code>bool</code>)             </li> <li> <code>show_heading</code>                 (<code>bool</code>)             </li> <li> <code>heading</code>                 (<code>str</code>)             </li> <li> <code>heading_level</code>                 (<code>int</code>)             </li> <li> <code>show_branding</code>                 (<code>bool</code>)             </li> <li> <code>branding_icon</code>                 (<code>str</code>)             </li> <li> <code>branding_icon_color</code>                 (<code>str</code>)             </li> <li> <code>show_toc_entry</code>                 (<code>bool</code>)             </li> <li> <code>toc_label</code>                 (<code>str</code>)             </li> <li> <code>show_signature</code>                 (<code>bool</code>)             </li> <li> <code>signature_repository</code>                 (<code>str</code>)             </li> <li> <code>signature_show_secrets</code>                 (<code>bool</code>)             </li> <li> <code>signature_show_permissions</code>                 (<code>bool</code>)             </li> <li> <code>signature_version</code>                 (<code>SIGNATURE_VERSION</code>)             </li> <li> <code>signature_version_string</code>                 (<code>str</code>)             </li> <li> <code>show_inputs</code>                 (<code>bool</code>)             </li> <li> <code>show_inputs_only_required</code>                 (<code>bool</code>)             </li> <li> <code>show_outputs</code>                 (<code>bool</code>)             </li> <li> <code>show_secrets</code>                 (<code>bool</code>)             </li> <li> <code>show_secrets_only_required</code>                 (<code>bool</code>)             </li> <li> <code>parameters_order</code>                 (<code>PARAMETERS_ORDER</code>)             </li> <li> <code>parameters_section_style</code>                 (<code>PARAMETERS_SECTION_STYLE</code>)             </li> <li> <code>parameters_anchors</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"usage/general/","title":"General options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_description: true</code><code>show_description: false</code> Preview <code>description: ''</code><code>description: 'A custom description'</code> Preview <code>show_source: true</code><code>show_source: false</code>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.show_description","title":"<code>show_description</code>","text":"<p>Whether to show the description in the documentation.</p>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.description","title":"<code>description</code>","text":"<p>A custom string to override the autogenerated description of the object.</p>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre>        A custom description             <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/general/#mkdocstrings_handlers.github.config.GitHubOptions.show_source","title":"<code>show_source</code>","text":"<p>Whether to show the source link in the documentation.</p>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/general/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p>"},{"location":"usage/headings/","title":"Headings options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_heading: true</code><code>show_heading: false</code> <pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> Preview <code>heading: ''</code><code>heading: 'A custom heading'</code> Preview <code>heading_level: 3</code><code>heading_level: 5</code> Preview <code>show_branding: true</code><code>show_branding: false</code> Preview <code>branding_icon: ''</code><code>branding_icon: 'briefcase'</code> Preview <code>branding_icon_color: ''</code><code>branding_icon_color: 'green'</code> Preview <code>show_toc_entry: true</code><code>show_toc_entry: false</code> <p>Table of contents Some heading <code>Example object</code> Other heading </p> <p>Table of contents Some heading Other heading</p> Preview <code>toc_label: ''</code><code>toc_label: 'Custom label'</code> <p>Table of contents Some heading <code>Example object</code> Other heading </p> <p>Table of contents Some heading <code>Custom label</code> Other heading</p>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_heading","title":"<code>show_heading</code>","text":"<p>Whether to show the heading in the documentation.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.heading","title":"<code>heading</code>","text":"<p>A custom string to override the autogenerated heading of the object.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#.","title":"A custom heading","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.heading_level","title":"<code>heading_level</code>","text":"<p>The initial heading level to use.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_branding","title":"<code>show_branding</code>","text":"<p>Whether to show the action branding (logo and color) in the documentation.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.branding_icon","title":"<code>branding_icon</code>","text":"<p>Custom icon from https://feathericons.com/ to use for the branding.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.branding_icon_color","title":"<code>branding_icon_color</code>","text":"<p>Custom icon color for the feather icon.</p>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#.","title":"Checkout","text":"<pre><code>- uses: owner/repository@v1\n</code></pre> <p>Checkout a Git repository at a particular version</p> <p> Inputs: \u00a4 </p> Name Description Default <code>repository</code> <p>Repository name with owner. For example, actions/checkout</p> <code>${{ github.repository }}</code> <code>ref</code> <p>The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults to the reference or SHA for that event.  Otherwise, uses the default branch.</p> <code>token</code> <p>Personal access token (PAT) used to fetch the repository. The PAT is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the PAT.</p> <p>We recommend using a service account with the least permissions necessary. Also when generating a new PAT, select the least scopes necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>${{ github.token }}</code> <code>ssh-key</code> <p>SSH key used to fetch the repository. The SSH key is configured with the local git config, which enables your scripts to run authenticated git commands. The post-job step removes the SSH key.</p> <p>We recommend using a service account with the least permissions necessary.</p> <p>Learn more about creating and using encrypted secrets</p> <code>ssh-known-hosts</code> <p>Known hosts in addition to the user and global host key database. The public SSH keys for a host may be obtained using the utility <code>ssh-keyscan</code>. For example, <code>ssh-keyscan github.com</code>. The public key for github.com is always implicitly added.</p> <code>ssh-strict</code> <p>Whether to perform strict host key checking. When true, adds the options <code>StrictHostKeyChecking=yes</code> and <code>CheckHostIP=no</code> to the SSH command line. Use the input <code>ssh-known-hosts</code> to configure additional hosts.</p> <code>true</code> <code>ssh-user</code> <p>The user to use when connecting to the remote SSH host. By default 'git' is used.</p> <code>git</code> <code>persist-credentials</code> <p>Whether to configure the token or SSH key with the local git config</p> <code>true</code> <code>path</code> <p>Relative path under $GITHUB_WORKSPACE to place the repository</p> <code>clean</code> <p>Whether to execute <code>git clean -ffdx &amp;&amp; git reset --hard HEAD</code> before fetching</p> <code>true</code> <code>filter</code> <p>Partially clone against a given filter. Overrides sparse-checkout if set.</p> <code>sparse-checkout</code> <p>Do a sparse checkout on given patterns. Each pattern should be separated with new lines.</p> <code>sparse-checkout-cone-mode</code> <p>Specifies whether to use cone-mode when doing a sparse checkout.</p> <code>true</code> <code>fetch-depth</code> <p>Number of commits to fetch. 0 indicates all history for all branches and tags.</p> <code>1</code> <code>fetch-tags</code> <p>Whether to fetch tags, even if fetch-depth &gt; 0.</p> <code>false</code> <code>show-progress</code> <p>Whether to show progress status output when fetching.</p> <code>true</code> <code>lfs</code> <p>Whether to download Git-LFS files</p> <code>false</code> <code>submodules</code> <p>Whether to checkout submodules: <code>true</code> to checkout submodules or <code>recursive</code> to recursively checkout submodules.</p> <p>When the <code>ssh-key</code> input is not provided, SSH URLs beginning with <code>git@github.com:</code> are converted to HTTPS.</p> <code>false</code> <code>set-safe-directory</code> <p>Add repository path as safe.directory for Git global config by running <code>git config --global --add safe.directory &lt;path&gt;</code></p> <code>true</code> <code>github-server-url</code> <p>The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com</p> Source of <code>owner/repository@v1</code> <pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.show_toc_entry","title":"<code>show_toc_entry</code>","text":"<p>If the heading is not shown, at least add a ToC entry for it.</p>"},{"location":"usage/headings/#mkdocstrings_handlers.github.config.GitHubOptions.toc_label","title":"<code>toc_label</code>","text":"<p>A custom string to override the autogenerated toc label of the root object.</p>"},{"location":"usage/parameters/","title":"Parameters options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_inputs: true</code><code>show_inputs: false</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_inputs","title":"<code>show_inputs</code>","text":"<p>Whether to show inputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_inputs_only_required: false</code><code>show_inputs_only_required: true</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_inputs_only_required","title":"<code>show_inputs_only_required</code>","text":"<p>Whether to show only required inputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_outputs: false</code><code>show_outputs: true</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_outputs","title":"<code>show_outputs</code>","text":"<p>Whether to show outputs in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> <p> Outputs: \u00a4 </p> Name Description <code>deployment-id</code> <p>ID of the created deployment</p> <code>deployment-url</code> <p>URL of the deployment</p> <code>success</code> <p>Whether the deployment was successful</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_secrets: true</code><code>show_secrets: false</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_secrets","title":"<code>show_secrets</code>","text":"<p>Whether to show secrets in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_secrets_only_required: false</code><code>show_secrets_only_required: true</code>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.show_secrets_only_required","title":"<code>show_secrets_only_required</code>","text":"<p>Whether to show only required secrets in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>parameters_order: 'source'</code><code>parameters_order: 'alphabetical'</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_order","title":"<code>parameters_order</code>","text":"<p>The parameters ordering to use.</p> <ul> <li><code>alphabetical</code>: order by the parameters names,</li> <li><code>source</code>: order parameters as they appear in the source file.</li> </ul>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>version</code> <p>Version to deploy</p> <code>latest</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>parameters_section_style: 'table'</code><code>parameters_section_style: 'list'</code>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_section_style","title":"<code>parameters_section_style</code>","text":"<p>The style used to render docstring sections.</p> <ul> <li><code>table</code>: render parameters in a table,</li> <li><code>list</code>: render parameters in a list.</li> </ul>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> <p>Cross linking parameters</p> <p>It is possible to cross-link parameters within the yaml descriptions by a markdown link in the format <code>[text](#&lt;domain&gt;.&lt;name&gt;)</code>. </p> <p>E.g. the input <code>my_input</code> can be linked with <code>[text](#inputs.my_input)</code> the secret <code>MY_SECRET</code> is linked with <code>[text](#secrets.MY_SECRET)</code>.</p> Preview <code>parameters_anchors: true</code><code>parameters_anchors: false</code>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> <ul> <li> <code>environment</code> - required <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> </li> <li> <code>version</code> <p>Version to deploy</p>                Default: <code>latest</code> </li> <li> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p>                Default: <code>false</code> </li> <li> <code>parallel-jobs</code> <p>Number of parallel jobs</p>                Default: <code>1</code> </li> <li> <code>configuration</code> <p>JSON configuration object</p>                Default: <code>{}</code> </li> </ul> <p> Secrets: \u00a4 </p> <ul> <li> <code>API_KEY</code> - required <p>API key for external service</p> </li> <li> <code>DATABASE_URL</code> <p>Database connection string</p> </li> <li> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> </li> </ul> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#mkdocstrings_handlers.github.config.GitHubOptions.parameters_anchors","title":"<code>parameters_anchors</code>","text":"<p>Whether to add anchors to parameters in the documentation.</p>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> \u00a4 <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> \u00a4 <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> \u00a4 <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> \u00a4 <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> \u00a4 <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> \u00a4 <p>API key for external service</p> <code>DATABASE_URL</code> \u00a4 <p>Database connection string</p> <code>SLACK_WEBHOOK</code> \u00a4 <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/parameters/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/","title":"Signatures options","text":"Example action/workflow compsite action <code>action.yaml</code> action.yaml<pre><code>name: 'Checkout'\ndescription: 'Checkout a Git repository at a particular version'\n\nbranding:\n  icon: 'github'\n  color: 'blue'\n\ninputs:\n  repository:\n    description: 'Repository name with owner. For example, actions/checkout'\n    default: ${{ github.repository }}\n  ref:\n    description: &gt;\n      The branch, tag or SHA to checkout. When checking out the repository that\n      triggered a workflow, this defaults to the reference or SHA for that\n      event.  Otherwise, uses the default branch.\n  token:\n    description: &gt;\n      Personal access token (PAT) used to fetch the repository. The PAT is configured\n      with the local git config, which enables your scripts to run authenticated git\n      commands. The post-job step removes the PAT.\n\n\n      We recommend using a service account with the least permissions necessary.\n      Also when generating a new PAT, select the least scopes necessary.\n\n\n      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n    default: ${{ github.token }}\n  ssh-key:\n    description: &gt;\n      SSH key used to fetch the repository. The SSH key is configured with the local\n      git config, which enables your scripts to run authenticated git commands.\n      The post-job step removes the SSH key.\n\n\n      We recommend using a service account with the least permissions necessary.\n\n\n      [Learn more about creating and using\n      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)\n  ssh-known-hosts:\n    description: &gt;\n      Known hosts in addition to the user and global host key database. The public\n      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,\n      `ssh-keyscan github.com`. The public key for github.com is always implicitly added.\n  ssh-strict:\n    description: &gt;\n      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`\n      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to\n      configure additional hosts.\n    default: true\n  ssh-user:\n    description: &gt;\n      The user to use when connecting to the remote SSH host. By default 'git' is used.\n    default: git\n  persist-credentials:\n    description: 'Whether to configure the token or SSH key with the local git config'\n    default: true\n  path:\n    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'\n  clean:\n    description: 'Whether to execute `git clean -ffdx &amp;&amp; git reset --hard HEAD` before fetching'\n    default: true\n  filter:\n    description: &gt;\n      Partially clone against a given filter.\n      Overrides sparse-checkout if set.\n    default: null\n  sparse-checkout:\n    description: &gt;\n      Do a sparse checkout on given patterns.\n      Each pattern should be separated with new lines.\n    default: null\n  sparse-checkout-cone-mode:\n    description: &gt;\n      Specifies whether to use cone-mode when doing a sparse checkout.\n    default: true\n  fetch-depth:\n    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'\n    default: 1\n  fetch-tags:\n    description: 'Whether to fetch tags, even if fetch-depth &gt; 0.'\n    default: false\n  show-progress:\n    description: 'Whether to show progress status output when fetching.'\n    default: true\n  lfs:\n    description: 'Whether to download Git-LFS files'\n    default: false\n  submodules:\n    description: &gt;\n      Whether to checkout submodules: `true` to checkout submodules or `recursive` to\n      recursively checkout submodules.\n\n\n      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are\n      converted to HTTPS.\n    default: false\n  set-safe-directory:\n    description: Add repository path as safe.directory for Git global config by running `git config --global --add safe.directory &lt;path&gt;`\n    default: true\n  github-server-url:\n    description: The base URL for the GitHub instance that you are trying to clone from, will use environment defaults to fetch from the same instance that the workflow is running from unless specified. Example URLs are https://github.com or https://my-ghes-server.example.com\n    required: false\noutputs:\n  ref:\n    description: 'The branch, tag or SHA that was checked out'\n  commit:\n    description: 'The commit SHA that was checked out'\nruns:\n  using: node24\n  main: dist/index.js\n  post: dist/index.js\n</code></pre> reusable workflow <code>.github/workflows/example_workflow.yml</code> .github/workflows/example_workflow.yml<pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>show_signature: true</code><code>show_signature: false</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.show_signature","title":"<code>show_signature</code>","text":"<p>Whether to show the signature in the documentation.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> <p>Tip</p> <p>By default the current repository name is automatically grabbed from either the GitHub Actions environment or the git remotes.  This option only serves to customize the shown repository in the signature. </p> Preview <code>signature_repository: 'username/repo'</code><code>signature_repository: organization/repository</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_repository","title":"<code>signature_repository</code>","text":"<p>The GitHub repository in the format owner/repo.</p> <p>By default, the repository is inferred from the current git repository using the default origin remote. If it cannot be inferred, it must be set manually.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: username/repo/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>username/repo/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: organization/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>organization/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_show_secrets: false</code><code>signature_show_secrets: true</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_show_secrets","title":"<code>signature_show_secrets</code>","text":"<p>Whether to show secrets in the signature.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\nsecrets:\n  API_KEY: (2)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_show_permissions: true</code><code>signature_show_permissions: false</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_show_permissions","title":"<code>signature_show_permissions</code>","text":"<p>Whether to show permissions in the workflow signature.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> <p>Info</p> <p>To automatically grab the latest <code>major</code> or <code>semver</code> release, mkdocstrings-github uses local git tags matching the patterns <code>vX</code> (major) and <code>vX.Y.Z</code> (semver). Make sure your repository has appropriate tags if you wish to use these versioning options.</p> <p>When building your documentation in GitHub Actions, make sure that the checkout will have access to the git tags associated with the action/workflow versions. This is best done by specifying a checkout filter:</p> Example checkout<pre><code>...\n- name: checkout\n  uses: actions/checkout@v5\n  with:\n    filter: tree:0\n...\n- name: build step\n  run: mkdocs build \n</code></pre> Preview <code>signature_version: ref</code><code>signature_version: major</code><code>signature_version: semver</code><code>signature_version: string</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_version","title":"<code>signature_version</code>","text":"<p>The versioning scheme to use for the signature.</p> <ul> <li><code>ref</code>: use the git ref (branch or tag) from which the workflow or action is run,</li> <li><code>major</code>: use the latest release tag matching <code>vX</code> (e.g. <code>v1</code>, <code>v2</code>),</li> <li><code>semver</code>: use the latest release tag matching <code>vX.X.X</code> (e.g. <code>v1.0.0</code>, <code>v2.1.3</code>),</li> <li><code>string</code>: use the string provided in the <code>signature_version_string</code> option.</li> </ul>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@my_current_branch\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@my_current_branch</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@v1.2.3\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@v1.2.3</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@a_custom_version\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@a_custom_version</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre> Preview <code>signature_version_string: latest</code><code>signature_version_string: foobar</code>"},{"location":"usage/signatures/#mkdocstrings_handlers.github.config.GitHubOptions.signature_version_string","title":"<code>signature_version_string</code>","text":"<p>The version string to use if <code>signature_version</code> is set to <code>string</code>.</p>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@latest\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@latest</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"},{"location":"usage/signatures/#.github/workflows/example_workflow.yml","title":"Example workflow","text":"<pre><code>uses: owner/repository/.github/workflows/example_workflow.yml@foobar\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\nwith:\n  environment: (1)\n</code></pre> <ol> <li><p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul></li> <li><p>API key for external service</p></li> </ol> <p>This key is illegal but will still be parsed</p> <p> Inputs: \u00a4 </p> Name Description Default <code>environment</code> <p>Environment to deploy to. Must be one of </p> <ul> <li><code>development</code></li> <li><code>staging</code></li> <li><code>production</code></li> </ul> <code>version</code> <p>Version to deploy</p> <code>latest</code> <code>enable-notifications</code> <p>Whether to send notifications. Requires <code>SLACK_WEBHOOK</code> to be set.</p> <code>false</code> <code>parallel-jobs</code> <p>Number of parallel jobs</p> <code>1</code> <code>configuration</code> <p>JSON configuration object</p> <code>{}</code> <p> Secrets: \u00a4 </p> Name Description <code>API_KEY</code> <p>API key for external service</p> <code>DATABASE_URL</code> <p>Database connection string</p> <code>SLACK_WEBHOOK</code> <p>Slack webhook URL for notifications</p> Source of <code>owner/repository/.github/workflows/example_workflow.yml@foobar</code> <pre><code>name: 'Example workflow'\ndescription: \"This key is illegal but will still be parsed\"\n\non:\n  workflow_call:\n    inputs:\n      environment:\n        description: |\n          Environment to deploy to. Must be one of \n\n          - `development`\n          - `staging`\n          - `production`\n        required: true\n        type: string\n      version:\n        description: 'Version to deploy'\n        required: false\n        type: string\n        default: 'latest'\n      enable-notifications:\n        description: 'Whether to send notifications. Requires [`SLACK_WEBHOOK`](#secrets.SLACK_WEBHOOK) to be set.'\n        required: false\n        type: boolean\n        default: false\n      parallel-jobs:\n        description: 'Number of parallel jobs'\n        required: false\n        type: number\n        default: 1\n      configuration:\n        description: 'JSON configuration object'\n        required: false\n        type: string\n        default: '{}'\n    secrets:\n      API_KEY:\n        description: 'API key for external service'\n        required: true\n      DATABASE_URL:\n        description: 'Database connection string'\n        required: false\n      SLACK_WEBHOOK:\n        description: 'Slack webhook URL for notifications'\n        required: false\n    outputs:\n      deployment-id:\n        description: 'ID of the created deployment'\n        value: ${{ jobs.deploy.outputs.deployment-id }}\n      deployment-url:\n        description: 'URL of the deployment'\n        value: ${{ jobs.deploy.outputs.deployment-url }}\n      success:\n        description: 'Whether the deployment was successful'\n        value: ${{ jobs.deploy.outputs.success }}\n\npermissions:\n  contents: read\n  deployments: write\n  pull-requests: write\n  issues: read\n\nenv:\n  DEPLOYMENT_ENVIRONMENT: ${{ inputs.environment }}\n  ENABLE_DEBUG: false\n\njobs:\n  validate:\n    name: 'Validate Inputs'\n    runs-on: ubuntu-latest\n    steps:\n      - name: Validate environment\n        run: |\n          echo \"Validating environment: ${{ inputs.environment }}\"\n          if [[ ! \"${{ inputs.environment }}\" =~ ^(development|staging|production)$ ]]; then\n            echo \"Error: Invalid environment specified\"\n            exit 1\n          fi\n\n      - name: Validate version\n        run: |\n          echo \"Validating version: ${{ inputs.version }}\"\n\n      - name: Check secrets\n        run: |\n          if [[ -z \"${{ secrets.API_KEY }}\" ]]; then\n            echo \"Error: API_KEY secret is required\"\n            exit 1\n          fi\n          echo \"All required secrets are available\"\n\n  deploy:\n    name: 'Deploy Application'\n    runs-on: ubuntu-latest\n    needs: validate\n    outputs:\n      deployment-id: ${{ steps.deploy.outputs.deployment-id }}\n      deployment-url: ${{ steps.deploy.outputs.deployment-url }}\n      success: ${{ steps.deploy.outputs.success }}\n    steps:\n      - name: Setup deployment\n        run: |\n          echo \"Setting up deployment for ${{ inputs.environment }}\"\n          echo \"Version: ${{ inputs.version }}\"\n          echo \"Parallel jobs: ${{ inputs.parallel-jobs }}\"\n          echo \"Notifications enabled: ${{ inputs.enable-notifications }}\"\n\n      - name: Parse configuration\n        run: |\n          echo \"Configuration: ${{ inputs.configuration }}\"\n\n      - name: Execute deployment\n        id: deploy\n        run: |\n          deployment_id=\"reusable-deploy-$(date +%s)\"\n          deployment_url=\"https://${{ inputs.environment }}.example.com\"\n\n          echo \"deployment-id=${deployment_id}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"deployment-url=${deployment_url}\" &gt;&gt; $GITHUB_OUTPUT\n          echo \"success=true\" &gt;&gt; $GITHUB_OUTPUT\n\n          echo \"Deployment completed successfully\"\n          echo \"ID: ${deployment_id}\"\n          echo \"URL: ${deployment_url}\"\n\n  notify:\n    name: 'Send Notifications'\n    runs-on: ubuntu-latest\n    needs: deploy\n    if: ${{ inputs.enable-notifications }}\n    steps:\n      - name: Send Slack notification\n        run: |\n          echo \"Sending Slack notification about deployment ${{ needs.deploy.outputs.deployment-id }}\"\n\n      - name: Create GitHub deployment\n        run: |\n          echo \"Creating GitHub deployment status for ${{ needs.deploy.outputs.deployment-id }}\"\n</code></pre>"}]}